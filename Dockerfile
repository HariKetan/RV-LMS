# Multi-stage Dockerfile for Next.js (App Router) + Prisma (MongoDB)

# 1) Base deps for building
FROM node:20-alpine AS deps
WORKDIR /app

# Install system deps if needed (e.g., for sharp). Keep minimal.
RUN apk add --no-cache libc6-compat

# Install deps
COPY package.json package-lock.json ./
RUN npm ci

# 2) Build the app
FROM node:20-alpine AS builder
WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Generate Prisma Client (MongoDB)
RUN npx prisma generate

# Build Next.js
ENV NODE_ENV=production
RUN npm run build

# 3) Runtime image
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV PORT=3000
EXPOSE 3000

# Create a non-root user
RUN addgroup -S nextjs && adduser -S nextjs -G nextjs

# Copy standalone output for minimal runtime size
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public

# Ensure uploads directory exists and is writable (for volume mount)
RUN mkdir -p /app/public/uploads && chown -R nextjs:nextjs /app

USER nextjs

# Start the server.js generated by Next standalone output
CMD ["node", "server.js"]


