generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  TEACHER
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?         @unique
  hashedPassword  String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            UserRole?       @default(USER)
  // Optional for WebAuthn support
  Authenticator   Authenticator[]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // LMS Relations
  courses         Course[]        // Courses created by the user (if teacher)
  enrollments     Enrollment[]    // Courses the user is enrolled in

  // Extended profiles
  teacherProfile  TeacherProfile?
  studentProfile  StudentProfile?

  // ContentItem Relations
  likedItems      UserLike[]
  dislikedItems   UserDislike[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// LMS Models (Courses, Modules, etc.)
model Course {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  courseCode   String?
  thumbnail    String?
  published    Boolean      @default(false)
  teacherId    String       @db.ObjectId
  teacher      User         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  modules      Module[]
  enrollments  Enrollment[]

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Module {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  order        Int            // Order of the module within the course
  courseId     String         @db.ObjectId
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  contentItems ContentItem[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ContentItem {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  order       Int          // Order of the content item within its module
  type        ContentType
  fileUrl     String       // URL or path to the uploaded file/video
  moduleId    String       @db.ObjectId
  module      Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  likedBy     UserLike[]
  dislikedBy  UserDislike[]
}

model Enrollment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  courseId   String   @db.ObjectId
  enrolledAt DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

enum ContentType {
  VIDEO
  PDF
  DOCX
  OTHER
}

// -------------------------------------------------------------------
// Extended Profile Models
// -------------------------------------------------------------------

// Teacher-specific profile information
model TeacherProfile {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  firstName        String
  lastName         String
  phone            String?
  department       String?
  subject          String?
  position         String?
  yearsOfExperience Int?
  profileImage     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Student-specific profile information
model StudentProfile {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  firstName      String
  lastName       String
  phone          String?
  dateOfBirth    DateTime?
  enrollmentYear Int?
  gradeLevel     String?
  address        String?
  profileImage   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Many-to-Many relations
model UserLike {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String       @db.ObjectId
  contentItemId String       @db.ObjectId

  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentItem   ContentItem  @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  
  @@unique([userId, contentItemId])
}

model UserDislike {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String       @db.ObjectId
  contentItemId String       @db.ObjectId

  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentItem   ContentItem  @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  
  @@unique([userId, contentItemId])
}
